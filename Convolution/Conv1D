#include <cuda_runtime.h>

"""
Performs 1D "valid" convolution: output[i] = sum_j(input[i+j] * kernel[j])
Output size = input_size - kernel_size + 1
"""

#define MAX_KERNEL_SIZE 2048
__constant__ float d_kernel[MAX_KERNEL_SIZE];

__global__ void convolution_1d_kernel(const float* input, float* output, int input_size, int kernel_size) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    int output_size = input_size - kernel_size + 1;

    if (tid >= output_size) return;

    float result = 0.0f;
    for (int i = 0; i < kernel_size; ++i) {
        result += input[tid + i] * d_kernel[i];
    }
    output[tid] = result;
}


extern "C" void solve(const float* input, const float* kernel, float* output, int input_size, int kernel_size) {
    cudaMemcpyToSymbol(d_kernel, kernel, kernel_size * sizeof(float));

    int output_size = input_size - kernel_size + 1;
    int threadsPerBlock = 256;
    int blocksPerGrid = (output_size + threadsPerBlock - 1) / threadsPerBlock;

    convolution_1d_kernel<<<blocksPerGrid, threadsPerBlock>>>(input, output, input_size, kernel_size);
    cudaDeviceSynchronize();
}

